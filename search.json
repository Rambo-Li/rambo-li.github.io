[
  {
    "objectID": "posts/2_OTC_240201/index.html",
    "href": "posts/2_OTC_240201/index.html",
    "title": "New Grad to Pro (part 1 - OTS Tools)",
    "section": "",
    "text": "Since I started looking for a job, I find that there is a gap between the academic training and the professional requirements. I think this gap consists of two parts: one in the use of off-shelf products, another is the deployment process. In this blog, I want to speak about the former.\nAs a student, most of the work is done with bare-bone programming language and standard libraries. In the rare case of a massive, battery-included, mature production library, you only need a tiny bit of it. However, in the professional world, most of work involves with these mature libraries or products, and you are going to touch most of the nitty-gritties.\nEach tool of course has its usage. But I think there are something in common when it comes to utilizing a tool, specifically dependency, entry point, and detour.\nDependency (should be easy, and can be really messy)\nSome tools come with all-in-one installation, while others requires prerequisites or extensions. Requirement of data format or folder structure can also be viewed as a dependency. Getting the dependencies right can be seriously tricky when the documentation is incorrect or missing.\nEntry point (consume most of time and effort)\nA mature tool needs to consider a lot of scenarios, known as complexity. Handling the complexity, or robust, is a deeply desired characteristic. To do that, the tool needs to be designed in a way that accepts all possible input, which means it needs to offer multiple entry points. This usually makes the tool harder to start with because you would think your use case is straightforward and the way you use the tool should be straightforward too, while in reality, the tool needs way more information than you expected. Tools like git needs to handle time difference, branch difference, location difference, so sometimes you really need to think about how to pass your data to it to get what you want.\nConfiguration can be thought as entry options too. You configure is how you fit your use case to the tool.\nDetour (can be ignored, might be important for teamwork)\nSome scenarios overlap so the solutions a tool offer overlap too. This could drain your mental energy as well. What is the best or fastest way to do it? What are the implications if I chose this way? Which way helps more in the future? The impact of different choices is often in brevity or not mentioned at all in documentation. This is the easiest and hardest problem of the three. It is easy because you only need one way to work, while it is hard because you need to know all ways to truly understand them.\nIn addition to these three, if you want to be able to debug it when something goes wrong, you need to understand how data flows underneath."
  },
  {
    "objectID": "posts/3_LC_hard_20240213/index.html",
    "href": "posts/3_LC_hard_20240213/index.html",
    "title": "Leetcode Hard Problems",
    "section": "",
    "text": "I’ve been grinding Leetcode for some time. Medium and easy problems are not challenging anymore and my focus now is hard.\nThe reasons these problems are hard are from three aspects: 1. The underlying data structure, 2. The scenarios that the data structure needs to be updated, 3. The updating rule.\nThe correct way of dismantling the problem is crucial. A wrong way of approaching the problems won’t give you a solution\nsatisfies all three aspects. The direction for medium and easy problems are obvious while hards are mostly vague.\nMy methodology to solve the hards is as follows: 1. Poke the problem with brutal-force or come up with a top-level direction 2. Test the chosen direction in terms of the three aspects 3. If something doesn’t come together, likely the direction is wrong and a new way of approaching is needed.\nDoing Leetcode hard is fun but very time-consuming. A problem can easily take several hours. Base on current situation, I will shift my priority to learning new tools, limiting at most two hard problems a week."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Intellectually curious about fundamental problems as well as everyday hassles. Currently, that fundamental problem is computer science and how to apply it to serve the world better. Everyday hassles include skiing, cooking, growing with my wife and kids, etc."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Rambo’s Blog",
    "section": "",
    "text": "Leetcode Hard Problems\n\n\n\n\n\n\nAlgorithm\n\n\n\n\n\n\n\n\n\nFeb 13, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNew Grad to Pro (part 1 - OTS Tools)\n\n\n\n\n\n\ntools\n\n\ncareer\n\n\n\n\n\n\n\n\n\nJan 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nFirst Blog - How I got here\n\n\n\n\n\n\nnews\n\n\ntools\n\n\n\n\n\n\n\n\n\nJan 27, 2024\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/1_setup_240131/index.html",
    "href": "posts/1_setup_240131/index.html",
    "title": "First Blog - How I got here",
    "section": "",
    "text": "By how I got here, I mean what tools I used to set up this web blog.\nThe tool chain includes quarto, github and the underlying git protocol. When I analyze the tool chain, I like to consider how data flows through them. Here is an illustration.\n\nQuarto is an building tool that transforms plain text to HTML and can help with building a simple web site like blog. This process is very similar to compiling. That’s probably why words like “render” and “build” are all over quarto documentation. This “building” or “rendering” can happen in local or remote, so I tried them both for better understanding.\nInstead of version control, Git is mainly for local and remote synchronization. Github is responsible for deploying the blog. It offers a html building library which is not used in my case.\nSetting it all up isn’t as smooth as expected, and makes me wonder what’s the principle of utilizing existing tools. I think of three things: dependency, entry point, and detour. I will discuss these in a later blog.\nOverall, I am not completely satisfied with the automation. My vision was that manual operation is limited to editing the text in an editor. Now I still need to do a bit extra such as creating a folder for each blog. I might update this tool chain in the future."
  }
]