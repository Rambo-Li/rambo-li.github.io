---
title: "New Grad to Professional (part 1)"
date: "2024-01-30"
date-modified: "2024-02-01"
categories: [tools, career]
draft: "true"
---

Since I started looking for a job, I find that there is a gap between the academic training and the professional requirements. I think this gap consists of two parts: one in the use of off-shelf products, another is the deployment process. In this blog, I want to speak about the former.

As a student, most of the work is done with bare-bone programming language and standard libraries. In the rare case of a massive, battery-included, mature production library, you only need a tiny bit of it. However, in the professional world, most of work involves with these mature libraries or products, and you are going to touch most of the nitty-gritties.

Each tool of course has its usage. But I think there are something in common when it comes to utilizing a tool, specifically dependency, entry point, and detour. 

Dependency

Some tools come with all-in-one installation, while others requires prerequisites or extensions. Configuration can be thought as a dependency too, because only the correct configuration can work. Requirement of data format or folder structure can also be viewed as a dependency. Getting the dependencies right can be seriously tricky when the documentation is incorrect or missing.

Entry point

A mature tool needs to consider a lot of scenarios, known as complexity. Handling the complexity, or robust, is a deeply desired characteristic. To do that, the tool needs to be designed in a way that accepts all possible input, which means it might offer multiple entry points. This usually makes the tool harder to start with because you would think your use case is straightforward and the way you use the tool should be straightforward too, and in reality, it is not. Tools like git needs to handle time difference, branch difference, location difference, so sometimes you really need to think about how to pass your data to it to get what you want.

Detour

Some scenarios overlap so the solutions a tool offer overlap too. This could drain your mental energy as well. What is the best or fastest way to do it? What are the implications if I chose this way? Which way helps more in the future? The impact of different choices is often in brevity or not mentioned at all in documentation. This is the easiest and hardest problem of the three. It is easy because you only need one way to work, while it is hard because you need to know all ways to truly understand them.

In addition to these three, if you want to be able to debug it when something goes wrong, you need to understand how data flows underneath.
